{"version":3,"file":"main.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACriBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACbaAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,qBAAqB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+EAA+E,OAAO;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,yBAAyB;AACjD;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,wBAAwB,4BAA4B;AACpD;AACA,4BAA4B,yBAAyB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjyBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,oBAAoB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0EAA0E,MAAM;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACbyEAAyE,UAAU,IAAI,yBAAyB;AAChiBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,eAAe;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,QAAQ;AACvE,0EAA0E,MAAM;AAChF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACbuDAAuD,QAAQ,wFAAwF;AACvJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEiC;;;;;;;;;;;;;;;;;;;;;;;;AC3+DjC;AACA;AACA;;AAGoC;AAGpC,SAASC,OAAOA,CAAEC,OAAO,EAAE;EACzB,OAAOC,QAAQ,CAACC,aAAa,CAACF,OAAO,CAAC;AACxC;AAGA,IAAID,OAAO,CAAC,aAAa,CAAC,EAAE;EAC1B,IAAID,mDAAU,CAAC;IACbK,MAAM,EAAE,aAAa;IACrBC,QAAQ,EAAE;MACRC,UAAU,EAAE;IACd;EACF,CAAC,CAAC;AAEJ;AAGA,IAAIN,OAAO,CAAC,eAAe,CAAC,EAAE;EAC5B,IAAID,mDAAU,CAAC;IACbK,MAAM,EAAE,eAAe;IACvBC,QAAQ,EAAE;MACRC,UAAU,EAAE;IACd;EACF,CAAC,CAAC;AAEJ;AAGAJ,QAAQ,CAACK,IAAI,CAACC,gBAAgB,CAAC,OAAO,EAAGC,CAAC,IAAK;EAC7C,IAAIC,MAAM,GAAGD,CAAC,CAACC,MAAM;EACrBC,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;EACnB,IAAIA,MAAM,CAACG,OAAO,CAACC,SAAS,EAAEC,aAAa,CAACL,MAAM,CAAC;AACrD,CAAC,CAAC;AAEF,MAAMK,aAAa,GAAIL,MAAM,IAAK;EAChCA,MAAM,CAACM,SAAS,CAACC,MAAM,CAAC,mBAAmB,CAAC;AAC9C,CAAC,C;;;;;;;;;;;;;;;AC3CD,iEAAe;EACbC,QAAQ,EAAEC,MAAM;EAChBC,UAAU,EAAElB,QAAQ;EACpBmB,MAAM,EAAEnB,QAAQ,CAACoB,eAAe;EAChCC,MAAM,EAAErB,QAAQ,CAACK;AACnB,CAAC,E;;;;;;;;;;;;;;;;;;;;;;;;AELD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASiB,yBAAyBA,CAACC,KAAK,EAAE;EACxC,IAAIC,gBAAgB,GAAG,IAAI;EAC3B,IAAIC,uBAAuB,GAAG,KAAK;EACnC,IAAIC,8BAA8B,GAAG,IAAI;EAEzC,IAAIC,mBAAmB,GAAG;IACxBC,IAAI,EAAE,IAAI;IACVC,MAAM,EAAE,IAAI;IACZC,GAAG,EAAE,IAAI;IACTC,GAAG,EAAE,IAAI;IACTC,KAAK,EAAE,IAAI;IACXC,QAAQ,EAAE,IAAI;IACdC,MAAM,EAAE,IAAI;IACZC,IAAI,EAAE,IAAI;IACVC,KAAK,EAAE,IAAI;IACXC,IAAI,EAAE,IAAI;IACVC,IAAI,EAAE,IAAI;IACVC,QAAQ,EAAE,IAAI;IACd,gBAAgB,EAAE;EACpB,CAAC;;EAED;AACF;AACA;AACA;AACA;EACE,SAASC,kBAAkBA,CAACC,EAAE,EAAE;IAC9B,IACEA,EAAE,IACFA,EAAE,KAAKzC,QAAQ,IACfyC,EAAE,CAACC,QAAQ,KAAK,MAAM,IACtBD,EAAE,CAACC,QAAQ,KAAK,MAAM,IACtB,WAAW,IAAID,EAAE,IACjB,UAAU,IAAIA,EAAE,CAAC3B,SAAS,EAC1B;MACA,OAAO,IAAI;IACb;IACA,OAAO,KAAK;EACd;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE,SAAS6B,6BAA6BA,CAACF,EAAE,EAAE;IACzC,IAAIG,IAAI,GAAGH,EAAE,CAACG,IAAI;IAClB,IAAIC,OAAO,GAAGJ,EAAE,CAACI,OAAO;IAExB,IAAIA,OAAO,KAAK,OAAO,IAAIlB,mBAAmB,CAACiB,IAAI,CAAC,IAAI,CAACH,EAAE,CAACK,QAAQ,EAAE;MACpE,OAAO,IAAI;IACb;IAEA,IAAID,OAAO,KAAK,UAAU,IAAI,CAACJ,EAAE,CAACK,QAAQ,EAAE;MAC1C,OAAO,IAAI;IACb;IAEA,IAAIL,EAAE,CAACM,iBAAiB,EAAE;MACxB,OAAO,IAAI;IACb;IAEA,OAAO,KAAK;EACd;;EAEA;AACF;AACA;AACA;AACA;EACE,SAASC,oBAAoBA,CAACP,EAAE,EAAE;IAChC,IAAIA,EAAE,CAAC3B,SAAS,CAACmC,QAAQ,CAAC,eAAe,CAAC,EAAE;MAC1C;IACF;IACAR,EAAE,CAAC3B,SAAS,CAACoC,GAAG,CAAC,eAAe,CAAC;IACjCT,EAAE,CAACU,YAAY,CAAC,0BAA0B,EAAE,EAAE,CAAC;EACjD;;EAEA;AACF;AACA;AACA;AACA;EACE,SAASC,uBAAuBA,CAACX,EAAE,EAAE;IACnC,IAAI,CAACA,EAAE,CAACY,YAAY,CAAC,0BAA0B,CAAC,EAAE;MAChD;IACF;IACAZ,EAAE,CAAC3B,SAAS,CAACwC,MAAM,CAAC,eAAe,CAAC;IACpCb,EAAE,CAACc,eAAe,CAAC,0BAA0B,CAAC;EAChD;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASC,SAASA,CAACjD,CAAC,EAAE;IACpB,IAAIA,CAAC,CAACkD,OAAO,IAAIlD,CAAC,CAACmD,MAAM,IAAInD,CAAC,CAACoD,OAAO,EAAE;MACtC;IACF;IAEA,IAAInB,kBAAkB,CAACjB,KAAK,CAACqC,aAAa,CAAC,EAAE;MAC3CZ,oBAAoB,CAACzB,KAAK,CAACqC,aAAa,CAAC;IAC3C;IAEApC,gBAAgB,GAAG,IAAI;EACzB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASqC,aAAaA,CAACtD,CAAC,EAAE;IACxBiB,gBAAgB,GAAG,KAAK;EAC1B;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE,SAASsC,OAAOA,CAACvD,CAAC,EAAE;IAClB;IACA,IAAI,CAACiC,kBAAkB,CAACjC,CAAC,CAACC,MAAM,CAAC,EAAE;MACjC;IACF;IAEA,IAAIgB,gBAAgB,IAAImB,6BAA6B,CAACpC,CAAC,CAACC,MAAM,CAAC,EAAE;MAC/DwC,oBAAoB,CAACzC,CAAC,CAACC,MAAM,CAAC;IAChC;EACF;;EAEA;AACF;AACA;AACA;EACE,SAASuD,MAAMA,CAACxD,CAAC,EAAE;IACjB,IAAI,CAACiC,kBAAkB,CAACjC,CAAC,CAACC,MAAM,CAAC,EAAE;MACjC;IACF;IAEA,IACED,CAAC,CAACC,MAAM,CAACM,SAAS,CAACmC,QAAQ,CAAC,eAAe,CAAC,IAC5C1C,CAAC,CAACC,MAAM,CAAC6C,YAAY,CAAC,0BAA0B,CAAC,EACjD;MACA;MACA;MACA;MACA;MACA5B,uBAAuB,GAAG,IAAI;MAC9BR,MAAM,CAAC+C,YAAY,CAACtC,8BAA8B,CAAC;MACnDA,8BAA8B,GAAGT,MAAM,CAACgD,UAAU,CAAC,YAAW;QAC5DxC,uBAAuB,GAAG,KAAK;MACjC,CAAC,EAAE,GAAG,CAAC;MACP2B,uBAAuB,CAAC7C,CAAC,CAACC,MAAM,CAAC;IACnC;EACF;;EAEA;AACF;AACA;AACA;AACA;EACE,SAAS0D,kBAAkBA,CAAC3D,CAAC,EAAE;IAC7B,IAAIP,QAAQ,CAACmE,eAAe,KAAK,QAAQ,EAAE;MACzC;MACA;MACA;MACA;MACA,IAAI1C,uBAAuB,EAAE;QAC3BD,gBAAgB,GAAG,IAAI;MACzB;MACA4C,8BAA8B,CAAC,CAAC;IAClC;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,SAASA,8BAA8BA,CAAA,EAAG;IACxCpE,QAAQ,CAACM,gBAAgB,CAAC,WAAW,EAAE+D,oBAAoB,CAAC;IAC5DrE,QAAQ,CAACM,gBAAgB,CAAC,WAAW,EAAE+D,oBAAoB,CAAC;IAC5DrE,QAAQ,CAACM,gBAAgB,CAAC,SAAS,EAAE+D,oBAAoB,CAAC;IAC1DrE,QAAQ,CAACM,gBAAgB,CAAC,aAAa,EAAE+D,oBAAoB,CAAC;IAC9DrE,QAAQ,CAACM,gBAAgB,CAAC,aAAa,EAAE+D,oBAAoB,CAAC;IAC9DrE,QAAQ,CAACM,gBAAgB,CAAC,WAAW,EAAE+D,oBAAoB,CAAC;IAC5DrE,QAAQ,CAACM,gBAAgB,CAAC,WAAW,EAAE+D,oBAAoB,CAAC;IAC5DrE,QAAQ,CAACM,gBAAgB,CAAC,YAAY,EAAE+D,oBAAoB,CAAC;IAC7DrE,QAAQ,CAACM,gBAAgB,CAAC,UAAU,EAAE+D,oBAAoB,CAAC;EAC7D;EAEA,SAASC,iCAAiCA,CAAA,EAAG;IAC3CtE,QAAQ,CAACuE,mBAAmB,CAAC,WAAW,EAAEF,oBAAoB,CAAC;IAC/DrE,QAAQ,CAACuE,mBAAmB,CAAC,WAAW,EAAEF,oBAAoB,CAAC;IAC/DrE,QAAQ,CAACuE,mBAAmB,CAAC,SAAS,EAAEF,oBAAoB,CAAC;IAC7DrE,QAAQ,CAACuE,mBAAmB,CAAC,aAAa,EAAEF,oBAAoB,CAAC;IACjErE,QAAQ,CAACuE,mBAAmB,CAAC,aAAa,EAAEF,oBAAoB,CAAC;IACjErE,QAAQ,CAACuE,mBAAmB,CAAC,WAAW,EAAEF,oBAAoB,CAAC;IAC/DrE,QAAQ,CAACuE,mBAAmB,CAAC,WAAW,EAAEF,oBAAoB,CAAC;IAC/DrE,QAAQ,CAACuE,mBAAmB,CAAC,YAAY,EAAEF,oBAAoB,CAAC;IAChErE,QAAQ,CAACuE,mBAAmB,CAAC,UAAU,EAAEF,oBAAoB,CAAC;EAChE;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE,SAASA,oBAAoBA,CAAC9D,CAAC,EAAE;IAC/B;IACA;IACA,IAAIA,CAAC,CAACC,MAAM,CAACkC,QAAQ,IAAInC,CAAC,CAACC,MAAM,CAACkC,QAAQ,CAAC8B,WAAW,CAAC,CAAC,KAAK,MAAM,EAAE;MACnE;IACF;IAEAhD,gBAAgB,GAAG,KAAK;IACxB8C,iCAAiC,CAAC,CAAC;EACrC;;EAEA;EACA;EACA;EACAtE,QAAQ,CAACM,gBAAgB,CAAC,SAAS,EAAEkD,SAAS,EAAE,IAAI,CAAC;EACrDxD,QAAQ,CAACM,gBAAgB,CAAC,WAAW,EAAEuD,aAAa,EAAE,IAAI,CAAC;EAC3D7D,QAAQ,CAACM,gBAAgB,CAAC,aAAa,EAAEuD,aAAa,EAAE,IAAI,CAAC;EAC7D7D,QAAQ,CAACM,gBAAgB,CAAC,YAAY,EAAEuD,aAAa,EAAE,IAAI,CAAC;EAC5D7D,QAAQ,CAACM,gBAAgB,CAAC,kBAAkB,EAAE4D,kBAAkB,EAAE,IAAI,CAAC;EAEvEE,8BAA8B,CAAC,CAAC;;EAEhC;EACA;EACA;EACA;EACA7C,KAAK,CAACjB,gBAAgB,CAAC,OAAO,EAAEwD,OAAO,EAAE,IAAI,CAAC;EAC9CvC,KAAK,CAACjB,gBAAgB,CAAC,MAAM,EAAEyD,MAAM,EAAE,IAAI,CAAC;;EAE5C;EACA;EACA;EACA;EACA;EACA,IAAIxC,KAAK,CAACkD,QAAQ,KAAKC,IAAI,CAACC,sBAAsB,IAAIpD,KAAK,CAACqD,IAAI,EAAE;IAChE;IACA;IACA;IACArD,KAAK,CAACqD,IAAI,CAACzB,YAAY,CAAC,uBAAuB,EAAE,EAAE,CAAC;EACtD,CAAC,MAAM,IAAI5B,KAAK,CAACkD,QAAQ,KAAKC,IAAI,CAACG,aAAa,EAAE;IAChD7E,QAAQ,CAACoB,eAAe,CAACN,SAAS,CAACoC,GAAG,CAAC,kBAAkB,CAAC;IAC1DlD,QAAQ,CAACoB,eAAe,CAAC+B,YAAY,CAAC,uBAAuB,EAAE,EAAE,CAAC;EACpE;AACF;;AAEA;AACA;AACA;AACA,IAAI,OAAOlC,MAAM,KAAK,WAAW,IAAI,OAAOjB,QAAQ,KAAK,WAAW,EAAE;EACpE;EACA;EACA;EACAiB,MAAM,CAACK,yBAAyB,GAAGA,yBAAyB;;EAE5D;EACA;EACA,IAAIwD,KAAK;EAET,IAAI;IACFA,KAAK,GAAG,IAAIC,WAAW,CAAC,8BAA8B,CAAC;EACzD,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd;IACAF,KAAK,GAAG9E,QAAQ,CAACiF,WAAW,CAAC,aAAa,CAAC;IAC3CH,KAAK,CAACI,eAAe,CAAC,8BAA8B,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;EACzE;EAEAjE,MAAM,CAACkE,aAAa,CAACL,KAAK,CAAC;AAC7B;AAEA,IAAI,OAAO9E,QAAQ,KAAK,WAAW,EAAE;EACnC;EACA;EACAsB,yBAAyB,CAACtB,QAAQ,CAAC;AACrC,C;;;;;;UC/SA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA,E;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA,E;;;;;WCPA,wF;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D,E;;;;;;;;;;;;;;;;;ACNmB;AACQ;AACL","sources":["webpack://gulp-builder/./node_modules/slim-select/dist/slimselect.es.js","webpack://gulp-builder/./src/js/_functions.js","webpack://gulp-builder/./src/js/_vars.js","webpack://gulp-builder/./src/js/_vendor.js","webpack://gulp-builder/./src/js/vendor/focus-visible.js","webpack://gulp-builder/webpack/bootstrap","webpack://gulp-builder/webpack/runtime/compat get default export","webpack://gulp-builder/webpack/runtime/define property getters","webpack://gulp-builder/webpack/runtime/hasOwnProperty shorthand","webpack://gulp-builder/webpack/runtime/make namespace object","webpack://gulp-builder/./src/js/main.js"],"sourcesContent":["class CssClasses {\n    constructor(classes) {\n        if (!classes) {\n            classes = {};\n        }\n        this.main = classes.main || 'ss-main';\n        this.placeholder = classes.placeholder || 'ss-placeholder';\n        this.values = classes.values || 'ss-values';\n        this.single = classes.single || 'ss-single';\n        this.max = classes.max || 'ss-max';\n        this.value = classes.value || 'ss-value';\n        this.valueText = classes.valueText || 'ss-value-text';\n        this.valueDelete = classes.valueDelete || 'ss-value-delete';\n        this.valueOut = classes.valueOut || 'ss-value-out';\n        this.deselect = classes.deselect || 'ss-deselect';\n        this.deselectPath = classes.deselectPath || 'M10,10 L90,90 M10,90 L90,10';\n        this.arrow = classes.arrow || 'ss-arrow';\n        this.arrowClose = classes.arrowClose || 'M10,30 L50,70 L90,30';\n        this.arrowOpen = classes.arrowOpen || 'M10,70 L50,30 L90,70';\n        this.content = classes.content || 'ss-content';\n        this.openAbove = classes.openAbove || 'ss-open-above';\n        this.openBelow = classes.openBelow || 'ss-open-below';\n        this.search = classes.search || 'ss-search';\n        this.searchHighlighter = classes.searchHighlighter || 'ss-search-highlight';\n        this.searching = classes.searching || 'ss-searching';\n        this.addable = classes.addable || 'ss-addable';\n        this.addablePath = classes.addablePath || 'M50,10 L50,90 M10,50 L90,50';\n        this.list = classes.list || 'ss-list';\n        this.optgroup = classes.optgroup || 'ss-optgroup';\n        this.optgroupLabel = classes.optgroupLabel || 'ss-optgroup-label';\n        this.optgroupLabelText = classes.optgroupLabelText || 'ss-optgroup-label-text';\n        this.optgroupActions = classes.optgroupActions || 'ss-optgroup-actions';\n        this.optgroupSelectAll = classes.optgroupSelectAll || 'ss-selectall';\n        this.optgroupSelectAllBox = classes.optgroupSelectAllBox || 'M60,10 L10,10 L10,90 L90,90 L90,50';\n        this.optgroupSelectAllCheck = classes.optgroupSelectAllCheck || 'M30,45 L50,70 L90,10';\n        this.optgroupClosable = classes.optgroupClosable || 'ss-closable';\n        this.option = classes.option || 'ss-option';\n        this.optionDelete = classes.optionDelete || 'M10,10 L90,90 M10,90 L90,10';\n        this.highlighted = classes.highlighted || 'ss-highlighted';\n        this.open = classes.open || 'ss-open';\n        this.close = classes.close || 'ss-close';\n        this.selected = classes.selected || 'ss-selected';\n        this.error = classes.error || 'ss-error';\n        this.disabled = classes.disabled || 'ss-disabled';\n        this.hide = classes.hide || 'ss-hide';\n    }\n}\n\nfunction generateID() {\n    return Math.random().toString(36).substring(2, 10);\n}\nfunction hasClassInTree(element, className) {\n    function hasClass(e, c) {\n        if (c && e && e.classList && e.classList.contains(c)) {\n            return e;\n        }\n        if (c && e && e.dataset && e.dataset.id && e.dataset.id === className) {\n            return e;\n        }\n        return null;\n    }\n    function parentByClass(e, c) {\n        if (!e || e === document) {\n            return null;\n        }\n        else if (hasClass(e, c)) {\n            return e;\n        }\n        else {\n            return parentByClass(e.parentNode, c);\n        }\n    }\n    return hasClass(element, className) || parentByClass(element, className);\n}\nfunction debounce(func, wait = 50, immediate = false) {\n    let timeout;\n    return function (...args) {\n        const context = self;\n        const later = () => {\n            timeout = null;\n            if (!immediate) {\n                func.apply(context, args);\n            }\n        };\n        const callNow = immediate && !timeout;\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n        if (callNow) {\n            func.apply(context, args);\n        }\n    };\n}\nfunction isEqual(a, b) {\n    return JSON.stringify(a) === JSON.stringify(b);\n}\nfunction kebabCase(str) {\n    const result = str.replace(/[A-Z\\u00C0-\\u00D6\\u00D8-\\u00DE]/g, (match) => '-' + match.toLowerCase());\n    return str[0] === str[0].toUpperCase() ? result.substring(1) : result;\n}\n\nclass Optgroup {\n    constructor(optgroup) {\n        this.id = !optgroup.id || optgroup.id === '' ? generateID() : optgroup.id;\n        this.label = optgroup.label || '';\n        this.selectAll = optgroup.selectAll === undefined ? false : optgroup.selectAll;\n        this.selectAllText = optgroup.selectAllText || 'Select All';\n        this.closable = optgroup.closable || 'off';\n        this.options = [];\n        if (optgroup.options) {\n            for (const o of optgroup.options) {\n                this.options.push(new Option(o));\n            }\n        }\n    }\n}\nclass Option {\n    constructor(option) {\n        this.id = !option.id || option.id === '' ? generateID() : option.id;\n        this.value = option.value === undefined ? option.text : option.value;\n        this.text = option.text || '';\n        this.html = option.html || '';\n        this.defaultSelected = option.defaultSelected !== undefined ? option.defaultSelected : false;\n        this.selected = option.selected !== undefined ? option.selected : false;\n        this.display = option.display !== undefined ? option.display : true;\n        this.disabled = option.disabled !== undefined ? option.disabled : false;\n        this.mandatory = option.mandatory !== undefined ? option.mandatory : false;\n        this.placeholder = option.placeholder !== undefined ? option.placeholder : false;\n        this.class = option.class || '';\n        this.style = option.style || '';\n        this.data = option.data || {};\n    }\n}\nclass Store {\n    constructor(type, data) {\n        this.selectType = 'single';\n        this.data = [];\n        this.selectedOrder = [];\n        this.selectType = type;\n        this.setData(data);\n    }\n    validateDataArray(data) {\n        if (!Array.isArray(data)) {\n            return new Error('Data must be an array');\n        }\n        for (let dataObj of data) {\n            if (dataObj instanceof Optgroup || 'label' in dataObj) {\n                if (!('label' in dataObj)) {\n                    return new Error('Optgroup must have a label');\n                }\n                if ('options' in dataObj && dataObj.options) {\n                    for (let option of dataObj.options) {\n                        const validationError = this.validateOption(option);\n                        if (validationError) {\n                            return validationError;\n                        }\n                    }\n                }\n            }\n            else if (dataObj instanceof Option || 'text' in dataObj) {\n                const validationError = this.validateOption(dataObj);\n                if (validationError) {\n                    return validationError;\n                }\n            }\n            else {\n                return new Error('Data object must be a valid optgroup or option');\n            }\n        }\n        return null;\n    }\n    validateOption(option) {\n        if (!('text' in option)) {\n            return new Error('Option must have a text');\n        }\n        return null;\n    }\n    partialToFullData(data) {\n        let dataFinal = [];\n        data.forEach((dataObj) => {\n            if (dataObj instanceof Optgroup || 'label' in dataObj) {\n                let optOptions = [];\n                if ('options' in dataObj && dataObj.options) {\n                    dataObj.options.forEach((option) => {\n                        optOptions.push(new Option(option));\n                    });\n                }\n                if (optOptions.length > 0) {\n                    dataFinal.push(new Optgroup(dataObj));\n                }\n            }\n            if (dataObj instanceof Option || 'text' in dataObj) {\n                dataFinal.push(new Option(dataObj));\n            }\n        });\n        return dataFinal;\n    }\n    setData(data) {\n        this.data = this.partialToFullData(data);\n        if (this.selectType === 'single') {\n            this.setSelectedBy('id', this.getSelected());\n        }\n    }\n    getData() {\n        return this.filter(null, true);\n    }\n    getDataOptions() {\n        return this.filter(null, false);\n    }\n    addOption(option, addToStart = false) {\n        if (addToStart) {\n            let data = [new Option(option)];\n            this.setData(data.concat(this.getData()));\n        }\n        else {\n            this.setData(this.getData().concat(new Option(option)));\n        }\n    }\n    setSelectedBy(selectedType, selectedValues) {\n        let firstOption = null;\n        let hasSelected = false;\n        const selectedObjects = [];\n        for (let dataObj of this.data) {\n            if (dataObj instanceof Optgroup) {\n                for (let option of dataObj.options) {\n                    if (!firstOption) {\n                        firstOption = option;\n                    }\n                    option.selected = hasSelected ? false : selectedValues.includes(option[selectedType]);\n                    if (option.selected) {\n                        selectedObjects.push(option);\n                        if (this.selectType === 'single') {\n                            hasSelected = true;\n                        }\n                    }\n                }\n            }\n            if (dataObj instanceof Option) {\n                if (!firstOption) {\n                    firstOption = dataObj;\n                }\n                dataObj.selected = hasSelected ? false : selectedValues.includes(dataObj[selectedType]);\n                if (dataObj.selected) {\n                    selectedObjects.push(dataObj);\n                    if (this.selectType === 'single') {\n                        hasSelected = true;\n                    }\n                }\n            }\n        }\n        if (this.selectType === 'single' && firstOption && !hasSelected) {\n            firstOption.selected = true;\n            selectedObjects.push(firstOption);\n        }\n        const selectedIds = selectedValues.map((value) => {\n            var _a;\n            return ((_a = selectedObjects.find((option) => option[selectedType] === value)) === null || _a === void 0 ? void 0 : _a.id) || '';\n        });\n        this.selectedOrder = selectedIds;\n    }\n    getSelected() {\n        return this.getSelectedOptions().map((option) => option.id);\n    }\n    getSelectedValues() {\n        return this.getSelectedOptions().map((option) => option.value);\n    }\n    getSelectedOptions() {\n        return this.filter((opt) => {\n            return opt.selected;\n        }, false);\n    }\n    getOptgroupByID(id) {\n        for (let dataObj of this.data) {\n            if (dataObj instanceof Optgroup && dataObj.id === id) {\n                return dataObj;\n            }\n        }\n        return null;\n    }\n    getOptionByID(id) {\n        let options = this.filter((opt) => {\n            return opt.id === id;\n        }, false);\n        return options.length ? options[0] : null;\n    }\n    getSelectType() {\n        return this.selectType;\n    }\n    getFirstOption() {\n        let option = null;\n        for (let dataObj of this.data) {\n            if (dataObj instanceof Optgroup) {\n                option = dataObj.options[0];\n            }\n            else if (dataObj instanceof Option) {\n                option = dataObj;\n            }\n            if (option) {\n                break;\n            }\n        }\n        return option;\n    }\n    search(search, searchFilter) {\n        search = search.trim();\n        if (search === '') {\n            return this.getData();\n        }\n        return this.filter((opt) => {\n            return searchFilter(opt, search);\n        }, true);\n    }\n    filter(filter, includeOptgroup) {\n        const dataSearch = [];\n        this.data.forEach((dataObj) => {\n            if (dataObj instanceof Optgroup) {\n                let optOptions = [];\n                dataObj.options.forEach((option) => {\n                    if (!filter || filter(option)) {\n                        if (!includeOptgroup) {\n                            dataSearch.push(new Option(option));\n                        }\n                        else {\n                            optOptions.push(new Option(option));\n                        }\n                    }\n                });\n                if (optOptions.length > 0) {\n                    let optgroup = new Optgroup(dataObj);\n                    optgroup.options = optOptions;\n                    dataSearch.push(optgroup);\n                }\n            }\n            if (dataObj instanceof Option) {\n                if (!filter || filter(dataObj)) {\n                    dataSearch.push(new Option(dataObj));\n                }\n            }\n        });\n        return dataSearch;\n    }\n    selectedOrderOptions(options) {\n        const newOrder = [];\n        this.selectedOrder.forEach((id) => {\n            const option = options.find((opt) => opt.id === id);\n            if (option) {\n                newOrder.push(option);\n            }\n        });\n        options.forEach((option) => {\n            let isIn = false;\n            newOrder.forEach((selectedOption) => {\n                if (option.id === selectedOption.id) {\n                    isIn = true;\n                    return;\n                }\n            });\n            if (!isIn) {\n                newOrder.push(option);\n            }\n        });\n        return newOrder;\n    }\n}\n\nclass Render {\n    constructor(settings, classes, store, callbacks) {\n        this.store = store;\n        this.settings = settings;\n        this.classes = classes;\n        this.callbacks = callbacks;\n        this.lastSelectedOption = null;\n        this.main = this.mainDiv();\n        this.content = this.contentDiv();\n        this.updateClassStyles();\n        this.updateAriaAttributes();\n        if (this.settings.contentLocation) {\n            this.settings.contentLocation.appendChild(this.content.main);\n        }\n    }\n    enable() {\n        this.main.main.classList.remove(this.classes.disabled);\n        this.content.search.input.disabled = false;\n    }\n    disable() {\n        this.main.main.classList.add(this.classes.disabled);\n        this.content.search.input.disabled = true;\n    }\n    open() {\n        this.main.arrow.path.setAttribute('d', this.classes.arrowOpen);\n        this.main.main.classList.add(this.settings.openPosition === 'up' ? this.classes.openAbove : this.classes.openBelow);\n        this.main.main.setAttribute('aria-expanded', 'true');\n        this.moveContent();\n        const selectedOptions = this.store.getSelectedOptions();\n        if (selectedOptions.length) {\n            const selectedId = selectedOptions[selectedOptions.length - 1].id;\n            const selectedOption = this.content.list.querySelector('[data-id=\"' + selectedId + '\"]');\n            if (selectedOption) {\n                this.ensureElementInView(this.content.list, selectedOption);\n            }\n        }\n    }\n    close() {\n        this.main.main.classList.remove(this.classes.openAbove);\n        this.main.main.classList.remove(this.classes.openBelow);\n        this.main.main.setAttribute('aria-expanded', 'false');\n        this.content.main.classList.remove(this.classes.openAbove);\n        this.content.main.classList.remove(this.classes.openBelow);\n        this.main.arrow.path.setAttribute('d', this.classes.arrowClose);\n    }\n    updateClassStyles() {\n        this.main.main.className = '';\n        this.main.main.removeAttribute('style');\n        this.content.main.className = '';\n        this.content.main.removeAttribute('style');\n        this.main.main.classList.add(this.classes.main);\n        this.content.main.classList.add(this.classes.content);\n        if (this.settings.style !== '') {\n            this.main.main.style.cssText = this.settings.style;\n            this.content.main.style.cssText = this.settings.style;\n        }\n        if (this.settings.class.length) {\n            for (const c of this.settings.class) {\n                if (c.trim() !== '') {\n                    this.main.main.classList.add(c.trim());\n                    this.content.main.classList.add(c.trim());\n                }\n            }\n        }\n        if (this.settings.contentPosition === 'relative' || this.settings.contentPosition === 'fixed') {\n            this.content.main.classList.add('ss-' + this.settings.contentPosition);\n        }\n    }\n    updateAriaAttributes() {\n        var _a;\n        this.main.main.role = 'combobox';\n        this.main.main.setAttribute('aria-haspopup', 'listbox');\n        this.main.main.setAttribute('aria-controls', (_a = this.content.main.dataset.id) !== null && _a !== void 0 ? _a : '');\n        this.main.main.setAttribute('aria-expanded', 'false');\n        this.content.main.setAttribute('role', 'listbox');\n    }\n    mainDiv() {\n        var _a;\n        const main = document.createElement('div');\n        main.dataset.id = this.settings.id;\n        main.setAttribute('aria-label', this.settings.ariaLabel);\n        main.tabIndex = 0;\n        main.onkeydown = (e) => {\n            switch (e.key) {\n                case 'ArrowUp':\n                case 'ArrowDown':\n                    this.callbacks.open();\n                    e.key === 'ArrowDown' ? this.highlight('down') : this.highlight('up');\n                    return false;\n                case 'Tab':\n                    this.callbacks.close();\n                    return true;\n                case 'Enter':\n                case ' ':\n                    this.callbacks.open();\n                    const highlighted = this.content.list.querySelector('.' + this.classes.highlighted);\n                    if (highlighted) {\n                        highlighted.click();\n                    }\n                    return false;\n                case 'Escape':\n                    this.callbacks.close();\n                    return false;\n            }\n            if (e.key.length === 1) {\n                this.callbacks.open();\n            }\n            return true;\n        };\n        main.onclick = (e) => {\n            if (this.settings.disabled) {\n                return;\n            }\n            this.settings.isOpen ? this.callbacks.close() : this.callbacks.open();\n        };\n        const values = document.createElement('div');\n        values.classList.add(this.classes.values);\n        main.appendChild(values);\n        const deselect = document.createElement('div');\n        deselect.classList.add(this.classes.deselect);\n        const selectedOptions = (_a = this.store) === null || _a === void 0 ? void 0 : _a.getSelectedOptions();\n        if (!this.settings.allowDeselect || (this.settings.isMultiple && selectedOptions && selectedOptions.length <= 0)) {\n            deselect.classList.add(this.classes.hide);\n        }\n        else {\n            deselect.classList.remove(this.classes.hide);\n        }\n        deselect.onclick = (e) => {\n            e.stopPropagation();\n            if (this.settings.disabled) {\n                return;\n            }\n            let shouldDelete = true;\n            const before = this.store.getSelectedOptions();\n            const after = [];\n            if (this.callbacks.beforeChange) {\n                shouldDelete = this.callbacks.beforeChange(after, before) === true;\n            }\n            if (shouldDelete) {\n                if (this.settings.isMultiple) {\n                    this.callbacks.setSelected([], false);\n                    this.updateDeselectAll();\n                }\n                else {\n                    const firstOption = this.store.getFirstOption();\n                    const id = firstOption ? firstOption.id : '';\n                    this.callbacks.setSelected(id, false);\n                }\n                if (this.settings.closeOnSelect) {\n                    this.callbacks.close();\n                }\n                if (this.callbacks.afterChange) {\n                    this.callbacks.afterChange(this.store.getSelectedOptions());\n                }\n            }\n        };\n        const deselectSvg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n        deselectSvg.setAttribute('viewBox', '0 0 100 100');\n        const deselectPath = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n        deselectPath.setAttribute('d', this.classes.deselectPath);\n        deselectSvg.appendChild(deselectPath);\n        deselect.appendChild(deselectSvg);\n        main.appendChild(deselect);\n        const arrow = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n        arrow.classList.add(this.classes.arrow);\n        arrow.setAttribute('viewBox', '0 0 100 100');\n        const arrowPath = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n        arrowPath.setAttribute('d', this.classes.arrowClose);\n        if (this.settings.alwaysOpen) {\n            arrow.classList.add(this.classes.hide);\n        }\n        arrow.appendChild(arrowPath);\n        main.appendChild(arrow);\n        return {\n            main: main,\n            values: values,\n            deselect: {\n                main: deselect,\n                svg: deselectSvg,\n                path: deselectPath\n            },\n            arrow: {\n                main: arrow,\n                path: arrowPath\n            }\n        };\n    }\n    mainFocus(eventType) {\n        if (eventType !== 'click') {\n            this.main.main.focus({ preventScroll: true });\n        }\n    }\n    placeholder() {\n        const placeholderOption = this.store.filter((o) => o.placeholder, false);\n        let placeholderText = this.settings.placeholderText;\n        if (placeholderOption.length) {\n            if (placeholderOption[0].html !== '') {\n                placeholderText = placeholderOption[0].html;\n            }\n            else if (placeholderOption[0].text !== '') {\n                placeholderText = placeholderOption[0].text;\n            }\n        }\n        const placeholder = document.createElement('div');\n        placeholder.classList.add(this.classes.placeholder);\n        placeholder.innerHTML = placeholderText;\n        return placeholder;\n    }\n    renderValues() {\n        if (!this.settings.isMultiple) {\n            this.renderSingleValue();\n            return;\n        }\n        this.renderMultipleValues();\n        this.updateDeselectAll();\n    }\n    renderSingleValue() {\n        const selected = this.store.filter((o) => {\n            return o.selected && !o.placeholder;\n        }, false);\n        const selectedSingle = selected.length > 0 ? selected[0] : null;\n        if (!selectedSingle) {\n            this.main.values.innerHTML = this.placeholder().outerHTML;\n        }\n        else {\n            const singleValue = document.createElement('div');\n            singleValue.classList.add(this.classes.single);\n            if (selectedSingle.html) {\n                singleValue.innerHTML = selectedSingle.html;\n            }\n            else {\n                singleValue.innerText = selectedSingle.text;\n            }\n            this.main.values.innerHTML = singleValue.outerHTML;\n        }\n        if (!this.settings.allowDeselect || !selected.length) {\n            this.main.deselect.main.classList.add(this.classes.hide);\n        }\n        else {\n            this.main.deselect.main.classList.remove(this.classes.hide);\n        }\n    }\n    renderMultipleValues() {\n        let currentNodes = this.main.values.childNodes;\n        let selectedOptions = this.store.filter((opt) => {\n            return opt.selected && opt.display;\n        }, false);\n        if (selectedOptions.length === 0) {\n            this.main.values.innerHTML = this.placeholder().outerHTML;\n            return;\n        }\n        else {\n            const placeholder = this.main.values.querySelector('.' + this.classes.placeholder);\n            if (placeholder) {\n                placeholder.remove();\n            }\n        }\n        if (selectedOptions.length > this.settings.maxValuesShown) {\n            const singleValue = document.createElement('div');\n            singleValue.classList.add(this.classes.max);\n            singleValue.textContent = this.settings.maxValuesMessage.replace('{number}', selectedOptions.length.toString());\n            this.main.values.innerHTML = singleValue.outerHTML;\n            return;\n        }\n        else {\n            const maxValuesMessage = this.main.values.querySelector('.' + this.classes.max);\n            if (maxValuesMessage) {\n                maxValuesMessage.remove();\n            }\n        }\n        if (this.settings.keepOrder) {\n            selectedOptions = this.store.selectedOrderOptions(selectedOptions);\n        }\n        let removeNodes = [];\n        for (let i = 0; i < currentNodes.length; i++) {\n            const node = currentNodes[i];\n            const id = node.getAttribute('data-id');\n            if (id) {\n                const found = selectedOptions.filter((opt) => {\n                    return opt.id === id;\n                }, false);\n                if (!found.length) {\n                    removeNodes.push(node);\n                }\n            }\n        }\n        for (const n of removeNodes) {\n            n.classList.add(this.classes.valueOut);\n            setTimeout(() => {\n                if (this.main.values.hasChildNodes() && this.main.values.contains(n)) {\n                    this.main.values.removeChild(n);\n                }\n            }, 100);\n        }\n        currentNodes = this.main.values.childNodes;\n        for (let d = 0; d < selectedOptions.length; d++) {\n            let shouldAdd = true;\n            for (let i = 0; i < currentNodes.length; i++) {\n                if (selectedOptions[d].id === String(currentNodes[i].dataset.id)) {\n                    shouldAdd = false;\n                }\n            }\n            if (shouldAdd) {\n                if (this.settings.keepOrder) {\n                    this.main.values.appendChild(this.multipleValue(selectedOptions[d]));\n                }\n                else {\n                    if (currentNodes.length === 0) {\n                        this.main.values.appendChild(this.multipleValue(selectedOptions[d]));\n                    }\n                    else if (d === 0) {\n                        this.main.values.insertBefore(this.multipleValue(selectedOptions[d]), currentNodes[d]);\n                    }\n                    else {\n                        currentNodes[d - 1].insertAdjacentElement('afterend', this.multipleValue(selectedOptions[d]));\n                    }\n                }\n            }\n        }\n    }\n    multipleValue(option) {\n        const value = document.createElement('div');\n        value.classList.add(this.classes.value);\n        value.dataset.id = option.id;\n        const text = document.createElement('div');\n        text.classList.add(this.classes.valueText);\n        text.textContent = option.text;\n        value.appendChild(text);\n        if (!option.mandatory) {\n            const deleteDiv = document.createElement('div');\n            deleteDiv.classList.add(this.classes.valueDelete);\n            deleteDiv.setAttribute('tabindex', '0');\n            deleteDiv.onclick = (e) => {\n                e.preventDefault();\n                e.stopPropagation();\n                if (this.settings.disabled) {\n                    return;\n                }\n                let shouldDelete = true;\n                const before = this.store.getSelectedOptions();\n                const after = before.filter((o) => {\n                    return o.selected && o.id !== option.id;\n                }, true);\n                if (this.settings.minSelected && after.length < this.settings.minSelected) {\n                    return;\n                }\n                if (this.callbacks.beforeChange) {\n                    shouldDelete = this.callbacks.beforeChange(after, before) === true;\n                }\n                if (shouldDelete) {\n                    let selectedIds = [];\n                    for (const o of after) {\n                        if (o instanceof Optgroup) {\n                            for (const c of o.options) {\n                                selectedIds.push(c.id);\n                            }\n                        }\n                        if (o instanceof Option) {\n                            selectedIds.push(o.id);\n                        }\n                    }\n                    this.callbacks.setSelected(selectedIds, false);\n                    if (this.settings.closeOnSelect) {\n                        this.callbacks.close();\n                    }\n                    if (this.callbacks.afterChange) {\n                        this.callbacks.afterChange(after);\n                    }\n                    this.updateDeselectAll();\n                }\n            };\n            const deleteSvg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n            deleteSvg.setAttribute('viewBox', '0 0 100 100');\n            const deletePath = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n            deletePath.setAttribute('d', this.classes.optionDelete);\n            deleteSvg.appendChild(deletePath);\n            deleteDiv.appendChild(deleteSvg);\n            value.appendChild(deleteDiv);\n            deleteDiv.onkeydown = (e) => {\n                if (e.key === 'Enter') {\n                    deleteDiv.click();\n                }\n            };\n        }\n        return value;\n    }\n    contentDiv() {\n        const main = document.createElement('div');\n        main.dataset.id = this.settings.id;\n        const search = this.searchDiv();\n        main.appendChild(search.main);\n        const list = this.listDiv();\n        main.appendChild(list);\n        return {\n            main: main,\n            search: search,\n            list: list\n        };\n    }\n    moveContent() {\n        if (this.settings.contentPosition === 'relative') {\n            this.moveContentBelow();\n            return;\n        }\n        if (this.settings.openPosition === 'down') {\n            this.moveContentBelow();\n            return;\n        }\n        else if (this.settings.openPosition === 'up') {\n            this.moveContentAbove();\n            return;\n        }\n        if (this.putContent() === 'up') {\n            this.moveContentAbove();\n        }\n        else {\n            this.moveContentBelow();\n        }\n    }\n    searchDiv() {\n        const main = document.createElement('div');\n        const input = document.createElement('input');\n        const addable = document.createElement('div');\n        main.classList.add(this.classes.search);\n        const searchReturn = {\n            main,\n            input\n        };\n        if (!this.settings.showSearch) {\n            main.classList.add(this.classes.hide);\n            input.readOnly = true;\n        }\n        input.type = 'search';\n        input.placeholder = this.settings.searchPlaceholder;\n        input.tabIndex = -1;\n        input.setAttribute('aria-label', this.settings.searchPlaceholder);\n        input.setAttribute('autocapitalize', 'off');\n        input.setAttribute('autocomplete', 'off');\n        input.setAttribute('autocorrect', 'off');\n        input.oninput = debounce((e) => {\n            this.callbacks.search(e.target.value);\n        }, 100);\n        input.onkeydown = (e) => {\n            switch (e.key) {\n                case 'ArrowUp':\n                case 'ArrowDown':\n                    e.key === 'ArrowDown' ? this.highlight('down') : this.highlight('up');\n                    return false;\n                case 'Tab':\n                    this.callbacks.close();\n                    return true;\n                case 'Escape':\n                    this.callbacks.close();\n                    return false;\n                case ' ':\n                    const highlighted = this.content.list.querySelector('.' + this.classes.highlighted);\n                    if (highlighted) {\n                        highlighted.click();\n                        return false;\n                    }\n                    return true;\n                case 'Enter':\n                    if (this.callbacks.addable) {\n                        addable.click();\n                        return false;\n                    }\n                    else {\n                        const highlighted = this.content.list.querySelector('.' + this.classes.highlighted);\n                        if (highlighted) {\n                            highlighted.click();\n                            return false;\n                        }\n                    }\n                    return true;\n            }\n            return true;\n        };\n        main.appendChild(input);\n        if (this.callbacks.addable) {\n            addable.classList.add(this.classes.addable);\n            const plus = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n            plus.setAttribute('viewBox', '0 0 100 100');\n            const plusPath = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n            plusPath.setAttribute('d', this.classes.addablePath);\n            plus.appendChild(plusPath);\n            addable.appendChild(plus);\n            addable.onclick = (e) => {\n                e.preventDefault();\n                e.stopPropagation();\n                if (!this.callbacks.addable) {\n                    return;\n                }\n                const inputValue = this.content.search.input.value.trim();\n                if (inputValue === '') {\n                    this.content.search.input.focus();\n                    return;\n                }\n                const runFinish = (oo) => {\n                    let newOption = new Option(oo);\n                    this.callbacks.addOption(newOption);\n                    if (this.settings.isMultiple) {\n                        let ids = this.store.getSelected();\n                        ids.push(newOption.id);\n                        this.callbacks.setSelected(ids, true);\n                    }\n                    else {\n                        this.callbacks.setSelected([newOption.id], true);\n                    }\n                    this.callbacks.search('');\n                    if (this.settings.closeOnSelect) {\n                        setTimeout(() => {\n                            this.callbacks.close();\n                        }, 100);\n                    }\n                };\n                const addableValue = this.callbacks.addable(inputValue);\n                if (addableValue === false || addableValue === undefined || addableValue === null) {\n                    return;\n                }\n                if (addableValue instanceof Promise) {\n                    addableValue.then((value) => {\n                        if (typeof value === 'string') {\n                            runFinish({\n                                text: value,\n                                value: value\n                            });\n                        }\n                        else if (addableValue instanceof Error) {\n                            this.renderError(addableValue.message);\n                        }\n                        else {\n                            runFinish(value);\n                        }\n                    });\n                }\n                else if (typeof addableValue === 'string') {\n                    runFinish({\n                        text: addableValue,\n                        value: addableValue\n                    });\n                }\n                else if (addableValue instanceof Error) {\n                    this.renderError(addableValue.message);\n                }\n                else {\n                    runFinish(addableValue);\n                }\n                return;\n            };\n            main.appendChild(addable);\n            searchReturn.addable = {\n                main: addable,\n                svg: plus,\n                path: plusPath\n            };\n        }\n        return searchReturn;\n    }\n    searchFocus() {\n        this.content.search.input.focus();\n    }\n    getOptions(notPlaceholder = false, notDisabled = false, notHidden = false) {\n        let query = '.' + this.classes.option;\n        if (notPlaceholder) {\n            query += ':not(.' + this.classes.placeholder + ')';\n        }\n        if (notDisabled) {\n            query += ':not(.' + this.classes.disabled + ')';\n        }\n        if (notHidden) {\n            query += ':not(.' + this.classes.hide + ')';\n        }\n        return Array.from(this.content.list.querySelectorAll(query));\n    }\n    highlight(dir) {\n        const options = this.getOptions(true, true, true);\n        if (options.length === 0) {\n            return;\n        }\n        if (options.length === 1) {\n            if (!options[0].classList.contains(this.classes.highlighted)) {\n                options[0].classList.add(this.classes.highlighted);\n                return;\n            }\n        }\n        let highlighted = false;\n        for (const o of options) {\n            if (o.classList.contains(this.classes.highlighted)) {\n                highlighted = true;\n            }\n        }\n        if (!highlighted) {\n            for (const o of options) {\n                if (o.classList.contains(this.classes.selected)) {\n                    o.classList.add(this.classes.highlighted);\n                    break;\n                }\n            }\n        }\n        for (let i = 0; i < options.length; i++) {\n            if (options[i].classList.contains(this.classes.highlighted)) {\n                const prevOption = options[i];\n                prevOption.classList.remove(this.classes.highlighted);\n                const prevParent = prevOption.parentElement;\n                if (prevParent && prevParent.classList.contains(this.classes.open)) {\n                    const optgroupLabel = prevParent.querySelector('.' + this.classes.optgroupLabel);\n                    if (optgroupLabel) {\n                        optgroupLabel.click();\n                    }\n                }\n                let selectOption = options[dir === 'down' ? (i + 1 < options.length ? i + 1 : 0) : i - 1 >= 0 ? i - 1 : options.length - 1];\n                selectOption.classList.add(this.classes.highlighted);\n                this.ensureElementInView(this.content.list, selectOption);\n                const selectParent = selectOption.parentElement;\n                if (selectParent && selectParent.classList.contains(this.classes.close)) {\n                    const optgroupLabel = selectParent.querySelector('.' + this.classes.optgroupLabel);\n                    if (optgroupLabel) {\n                        optgroupLabel.click();\n                    }\n                }\n                return;\n            }\n        }\n        options[dir === 'down' ? 0 : options.length - 1].classList.add(this.classes.highlighted);\n        this.ensureElementInView(this.content.list, options[dir === 'down' ? 0 : options.length - 1]);\n    }\n    listDiv() {\n        const options = document.createElement('div');\n        options.classList.add(this.classes.list);\n        return options;\n    }\n    renderError(error) {\n        this.content.list.innerHTML = '';\n        const errorDiv = document.createElement('div');\n        errorDiv.classList.add(this.classes.error);\n        errorDiv.textContent = error;\n        this.content.list.appendChild(errorDiv);\n    }\n    renderSearching() {\n        this.content.list.innerHTML = '';\n        const searchingDiv = document.createElement('div');\n        searchingDiv.classList.add(this.classes.searching);\n        searchingDiv.textContent = this.settings.searchingText;\n        this.content.list.appendChild(searchingDiv);\n    }\n    renderOptions(data) {\n        this.content.list.innerHTML = '';\n        if (data.length === 0) {\n            const noResults = document.createElement('div');\n            noResults.classList.add(this.classes.search);\n            if (this.callbacks.addable) {\n                noResults.innerHTML = this.settings.addableText.replace('{value}', this.content.search.input.value);\n            }\n            else {\n                noResults.innerHTML = this.settings.searchText;\n            }\n            this.content.list.appendChild(noResults);\n            return;\n        }\n        if (this.settings.allowDeselect && !this.settings.isMultiple) {\n            const placeholderOption = this.store.filter((o) => o.placeholder, false);\n            if (!placeholderOption.length) {\n                this.store.addOption(new Option({\n                    text: '',\n                    value: '',\n                    selected: false,\n                    placeholder: true\n                }), true);\n            }\n        }\n        const fragment = document.createDocumentFragment();\n        for (const d of data) {\n            if (d instanceof Optgroup) {\n                const optgroupEl = document.createElement('div');\n                optgroupEl.classList.add(this.classes.optgroup);\n                const optgroupLabel = document.createElement('div');\n                optgroupLabel.classList.add(this.classes.optgroupLabel);\n                optgroupEl.appendChild(optgroupLabel);\n                const optgroupLabelText = document.createElement('div');\n                optgroupLabelText.classList.add(this.classes.optgroupLabelText);\n                optgroupLabelText.textContent = d.label;\n                optgroupLabel.appendChild(optgroupLabelText);\n                const optgroupActions = document.createElement('div');\n                optgroupActions.classList.add(this.classes.optgroupActions);\n                optgroupLabel.appendChild(optgroupActions);\n                if (this.settings.isMultiple && d.selectAll) {\n                    const selectAll = document.createElement('div');\n                    selectAll.classList.add(this.classes.optgroupSelectAll);\n                    let allSelected = true;\n                    for (const o of d.options) {\n                        if (!o.selected) {\n                            allSelected = false;\n                            break;\n                        }\n                    }\n                    if (allSelected) {\n                        selectAll.classList.add(this.classes.selected);\n                    }\n                    const selectAllText = document.createElement('span');\n                    selectAllText.textContent = d.selectAllText;\n                    selectAll.appendChild(selectAllText);\n                    const selectAllSvg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n                    selectAllSvg.setAttribute('viewBox', '0 0 100 100');\n                    selectAll.appendChild(selectAllSvg);\n                    const selectAllBox = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n                    selectAllBox.setAttribute('d', this.classes.optgroupSelectAllBox);\n                    selectAllSvg.appendChild(selectAllBox);\n                    const selectAllCheck = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n                    selectAllCheck.setAttribute('d', this.classes.optgroupSelectAllCheck);\n                    selectAllSvg.appendChild(selectAllCheck);\n                    selectAll.addEventListener('click', (e) => {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        const currentSelected = this.store.getSelected();\n                        if (allSelected) {\n                            const newSelected = currentSelected.filter((s) => {\n                                for (const o of d.options) {\n                                    if (s === o.id) {\n                                        return false;\n                                    }\n                                }\n                                return true;\n                            });\n                            this.callbacks.setSelected(newSelected, true);\n                            return;\n                        }\n                        else {\n                            const newSelected = currentSelected.concat(d.options.map((o) => o.id));\n                            for (const o of d.options) {\n                                if (!this.store.getOptionByID(o.id)) {\n                                    this.callbacks.addOption(o);\n                                }\n                            }\n                            this.callbacks.setSelected(newSelected, true);\n                            return;\n                        }\n                    });\n                    optgroupActions.appendChild(selectAll);\n                }\n                if (d.closable !== 'off') {\n                    const optgroupClosable = document.createElement('div');\n                    optgroupClosable.classList.add(this.classes.optgroupClosable);\n                    const optgroupClosableSvg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n                    optgroupClosableSvg.setAttribute('viewBox', '0 0 100 100');\n                    optgroupClosableSvg.classList.add(this.classes.arrow);\n                    optgroupClosable.appendChild(optgroupClosableSvg);\n                    const optgroupClosableArrow = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n                    optgroupClosableSvg.appendChild(optgroupClosableArrow);\n                    if (d.options.some((o) => o.selected) || this.content.search.input.value.trim() !== '') {\n                        optgroupClosable.classList.add(this.classes.open);\n                        optgroupClosableArrow.setAttribute('d', this.classes.arrowOpen);\n                    }\n                    else if (d.closable === 'open') {\n                        optgroupEl.classList.add(this.classes.open);\n                        optgroupClosableArrow.setAttribute('d', this.classes.arrowOpen);\n                    }\n                    else if (d.closable === 'close') {\n                        optgroupEl.classList.add(this.classes.close);\n                        optgroupClosableArrow.setAttribute('d', this.classes.arrowClose);\n                    }\n                    optgroupLabel.addEventListener('click', (e) => {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        if (optgroupEl.classList.contains(this.classes.close)) {\n                            optgroupEl.classList.remove(this.classes.close);\n                            optgroupEl.classList.add(this.classes.open);\n                            optgroupClosableArrow.setAttribute('d', this.classes.arrowOpen);\n                        }\n                        else {\n                            optgroupEl.classList.remove(this.classes.open);\n                            optgroupEl.classList.add(this.classes.close);\n                            optgroupClosableArrow.setAttribute('d', this.classes.arrowClose);\n                        }\n                    });\n                    optgroupActions.appendChild(optgroupClosable);\n                }\n                optgroupEl.appendChild(optgroupLabel);\n                for (const o of d.options) {\n                    optgroupEl.appendChild(this.option(o));\n                    fragment.appendChild(optgroupEl);\n                }\n            }\n            if (d instanceof Option) {\n                fragment.appendChild(this.option(d));\n            }\n        }\n        this.content.list.appendChild(fragment);\n    }\n    option(option) {\n        if (option.placeholder) {\n            const placeholder = document.createElement('div');\n            placeholder.classList.add(this.classes.option);\n            placeholder.classList.add(this.classes.hide);\n            return placeholder;\n        }\n        const optionEl = document.createElement('div');\n        optionEl.dataset.id = option.id;\n        optionEl.classList.add(this.classes.option);\n        optionEl.setAttribute('role', 'option');\n        if (option.class) {\n            option.class.split(' ').forEach((dataClass) => {\n                optionEl.classList.add(dataClass);\n            });\n        }\n        if (option.style) {\n            optionEl.style.cssText = option.style;\n        }\n        if (this.settings.searchHighlight && this.content.search.input.value.trim() !== '') {\n            optionEl.innerHTML = this.highlightText(option.html !== '' ? option.html : option.text, this.content.search.input.value, this.classes.searchHighlighter);\n        }\n        else if (option.html !== '') {\n            optionEl.innerHTML = option.html;\n        }\n        else {\n            optionEl.textContent = option.text;\n        }\n        if (this.settings.showOptionTooltips && optionEl.textContent) {\n            optionEl.setAttribute('title', optionEl.textContent);\n        }\n        if (!option.display) {\n            optionEl.classList.add(this.classes.hide);\n        }\n        if (option.disabled) {\n            optionEl.classList.add(this.classes.disabled);\n        }\n        if (option.selected && this.settings.hideSelected) {\n            optionEl.classList.add(this.classes.hide);\n        }\n        if (option.selected) {\n            optionEl.classList.add(this.classes.selected);\n            optionEl.setAttribute('aria-selected', 'true');\n            this.main.main.setAttribute('aria-activedescendant', optionEl.id);\n        }\n        else {\n            optionEl.classList.remove(this.classes.selected);\n            optionEl.setAttribute('aria-selected', 'false');\n        }\n        optionEl.addEventListener('click', (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            const selectedOptions = this.store.getSelected();\n            const element = e.currentTarget;\n            const elementID = String(element.dataset.id);\n            if (option.disabled || (option.selected && !this.settings.allowDeselect)) {\n                return;\n            }\n            if ((this.settings.isMultiple && this.settings.maxSelected <= selectedOptions.length && !option.selected) ||\n                (this.settings.isMultiple && this.settings.minSelected >= selectedOptions.length && option.selected)) {\n                return;\n            }\n            let shouldUpdate = false;\n            const before = this.store.getSelectedOptions();\n            let after = [];\n            if (this.settings.isMultiple) {\n                if (option.selected) {\n                    after = before.filter((o) => o.id !== elementID);\n                }\n                else {\n                    after = before.concat(option);\n                    if (!this.settings.closeOnSelect) {\n                        if (e.shiftKey && this.lastSelectedOption) {\n                            const options = this.store.getDataOptions();\n                            let lastClickedOptionIndex = options.findIndex((o) => o.id === this.lastSelectedOption.id);\n                            let currentOptionIndex = options.findIndex((o) => o.id === option.id);\n                            if (lastClickedOptionIndex >= 0 && currentOptionIndex >= 0) {\n                                const startIndex = Math.min(lastClickedOptionIndex, currentOptionIndex);\n                                const endIndex = Math.max(lastClickedOptionIndex, currentOptionIndex);\n                                const afterRange = options.slice(startIndex, endIndex + 1);\n                                if (afterRange.length > 0 && afterRange.length < this.settings.maxSelected) {\n                                    after = before.concat(afterRange.filter((a) => !before.find((b) => b.id === a.id)));\n                                }\n                            }\n                        }\n                        else if (!option.selected) {\n                            this.lastSelectedOption = option;\n                        }\n                    }\n                }\n            }\n            if (!this.settings.isMultiple) {\n                if (option.selected) {\n                    after = [];\n                }\n                else {\n                    after = [option];\n                }\n            }\n            if (!this.callbacks.beforeChange) {\n                shouldUpdate = true;\n            }\n            if (this.callbacks.beforeChange) {\n                if (this.callbacks.beforeChange(after, before) === false) {\n                    shouldUpdate = false;\n                }\n                else {\n                    shouldUpdate = true;\n                }\n            }\n            if (shouldUpdate) {\n                if (!this.store.getOptionByID(elementID)) {\n                    this.callbacks.addOption(option);\n                }\n                this.callbacks.setSelected(after.map((o) => o.id), false);\n                if (this.settings.closeOnSelect) {\n                    this.callbacks.close();\n                }\n                if (this.callbacks.afterChange) {\n                    this.callbacks.afterChange(after);\n                }\n            }\n        });\n        return optionEl;\n    }\n    destroy() {\n        this.main.main.remove();\n        this.content.main.remove();\n    }\n    highlightText(str, search, className) {\n        let completedString = str;\n        const regex = new RegExp('(?![^<]*>)(' + search.trim() + ')(?![^<]*>[^<>]*</)', 'i');\n        if (!str.match(regex)) {\n            return str;\n        }\n        const matchStartPosition = str.match(regex).index;\n        const matchEndPosition = matchStartPosition + str.match(regex)[0].toString().length;\n        const originalTextFoundByRegex = str.substring(matchStartPosition, matchEndPosition);\n        completedString = completedString.replace(regex, `<mark class=\"${className}\">${originalTextFoundByRegex}</mark>`);\n        return completedString;\n    }\n    moveContentAbove() {\n        const mainHeight = this.main.main.offsetHeight;\n        const contentHeight = this.content.main.offsetHeight;\n        this.main.main.classList.remove(this.classes.openBelow);\n        this.main.main.classList.add(this.classes.openAbove);\n        this.content.main.classList.remove(this.classes.openBelow);\n        this.content.main.classList.add(this.classes.openAbove);\n        const containerRect = this.main.main.getBoundingClientRect();\n        this.content.main.style.margin = '-' + (mainHeight + contentHeight - 1) + 'px 0px 0px 0px';\n        this.content.main.style.top =\n            containerRect.top + containerRect.height + (this.settings.contentPosition === 'fixed' ? 0 : window.scrollY) + 'px';\n        this.content.main.style.left =\n            containerRect.left + (this.settings.contentPosition === 'fixed' ? 0 : window.scrollX) + 'px';\n        this.content.main.style.width = containerRect.width + 'px';\n    }\n    moveContentBelow() {\n        this.main.main.classList.remove(this.classes.openAbove);\n        this.main.main.classList.add(this.classes.openBelow);\n        this.content.main.classList.remove(this.classes.openAbove);\n        this.content.main.classList.add(this.classes.openBelow);\n        const containerRect = this.main.main.getBoundingClientRect();\n        this.content.main.style.margin = '-1px 0px 0px 0px';\n        if (this.settings.contentPosition !== 'relative') {\n            this.content.main.style.top =\n                containerRect.top +\n                    containerRect.height +\n                    (this.settings.contentPosition === 'fixed' ? 0 : window.scrollY) +\n                    'px';\n            this.content.main.style.left =\n                containerRect.left + (this.settings.contentPosition === 'fixed' ? 0 : window.scrollX) + 'px';\n            this.content.main.style.width = containerRect.width + 'px';\n        }\n    }\n    ensureElementInView(container, element) {\n        const cTop = container.scrollTop + container.offsetTop;\n        const cBottom = cTop + container.clientHeight;\n        const eTop = element.offsetTop;\n        const eBottom = eTop + element.clientHeight;\n        if (eTop < cTop) {\n            container.scrollTop -= cTop - eTop;\n        }\n        else if (eBottom > cBottom) {\n            container.scrollTop += eBottom - cBottom;\n        }\n    }\n    putContent() {\n        const mainHeight = this.main.main.offsetHeight;\n        const mainRect = this.main.main.getBoundingClientRect();\n        const contentHeight = this.content.main.offsetHeight;\n        const spaceBelow = window.innerHeight - (mainRect.top + mainHeight);\n        if (spaceBelow <= contentHeight) {\n            if (mainRect.top > contentHeight) {\n                return 'up';\n            }\n            else {\n                return 'down';\n            }\n        }\n        return 'down';\n    }\n    updateDeselectAll() {\n        if (!this.store || !this.settings) {\n            return;\n        }\n        const selected = this.store.getSelectedOptions();\n        const hasSelectedItems = selected && selected.length > 0;\n        const isMultiple = this.settings.isMultiple;\n        const allowDeselect = this.settings.allowDeselect;\n        const deselectButton = this.main.deselect.main;\n        const hideClass = this.classes.hide;\n        if (allowDeselect && !(isMultiple && !hasSelectedItems)) {\n            deselectButton.classList.remove(hideClass);\n        }\n        else {\n            deselectButton.classList.add(hideClass);\n        }\n    }\n}\n\nclass Select {\n    constructor(select) {\n        this.listen = false;\n        this.observer = null;\n        this.select = select;\n        this.valueChange = this.valueChange.bind(this);\n        this.select.addEventListener('change', this.valueChange, {\n            passive: true\n        });\n        this.observer = new MutationObserver(this.observeCall.bind(this));\n        this.changeListen(true);\n    }\n    enable() {\n        this.select.disabled = false;\n    }\n    disable() {\n        this.select.disabled = true;\n    }\n    hideUI() {\n        this.select.tabIndex = -1;\n        this.select.style.display = 'none';\n        this.select.setAttribute('aria-hidden', 'true');\n    }\n    showUI() {\n        this.select.removeAttribute('tabindex');\n        this.select.style.display = '';\n        this.select.removeAttribute('aria-hidden');\n    }\n    changeListen(listen) {\n        this.listen = listen;\n        if (listen) {\n            if (this.observer) {\n                this.observer.observe(this.select, {\n                    subtree: true,\n                    childList: true,\n                    attributes: true\n                });\n            }\n        }\n        if (!listen) {\n            if (this.observer) {\n                this.observer.disconnect();\n            }\n        }\n    }\n    valueChange(ev) {\n        if (this.listen && this.onValueChange) {\n            this.onValueChange(this.getSelectedOptions());\n        }\n        return true;\n    }\n    observeCall(mutations) {\n        if (!this.listen) {\n            return;\n        }\n        let classChanged = false;\n        let disabledChanged = false;\n        let optgroupOptionChanged = false;\n        for (const m of mutations) {\n            if (m.target === this.select) {\n                if (m.attributeName === 'disabled') {\n                    disabledChanged = true;\n                }\n                if (m.attributeName === 'class') {\n                    classChanged = true;\n                }\n                if (m.type === 'childList') {\n                    for (const n of m.addedNodes) {\n                        if (n.nodeName === 'OPTION' && n.value === this.select.value) {\n                            this.select.dispatchEvent(new Event('change'));\n                            break;\n                        }\n                    }\n                    optgroupOptionChanged = true;\n                }\n            }\n            if (m.target.nodeName === 'OPTGROUP' || m.target.nodeName === 'OPTION') {\n                optgroupOptionChanged = true;\n            }\n        }\n        if (classChanged && this.onClassChange) {\n            this.onClassChange(this.select.className.split(' '));\n        }\n        if (disabledChanged && this.onDisabledChange) {\n            this.changeListen(false);\n            this.onDisabledChange(this.select.disabled);\n            this.changeListen(true);\n        }\n        if (optgroupOptionChanged && this.onOptionsChange) {\n            this.changeListen(false);\n            this.onOptionsChange(this.getData());\n            this.changeListen(true);\n        }\n    }\n    getData() {\n        let data = [];\n        const nodes = this.select.childNodes;\n        for (const n of nodes) {\n            if (n.nodeName === 'OPTGROUP') {\n                data.push(this.getDataFromOptgroup(n));\n            }\n            if (n.nodeName === 'OPTION') {\n                data.push(this.getDataFromOption(n));\n            }\n        }\n        return data;\n    }\n    getDataFromOptgroup(optgroup) {\n        let data = {\n            id: optgroup.id,\n            label: optgroup.label,\n            selectAll: optgroup.dataset ? optgroup.dataset.selectall === 'true' : false,\n            selectAllText: optgroup.dataset ? optgroup.dataset.selectalltext : 'Select all',\n            closable: optgroup.dataset ? optgroup.dataset.closable : 'off',\n            options: []\n        };\n        const options = optgroup.childNodes;\n        for (const o of options) {\n            if (o.nodeName === 'OPTION') {\n                data.options.push(this.getDataFromOption(o));\n            }\n        }\n        return data;\n    }\n    getDataFromOption(option) {\n        return {\n            id: option.id,\n            value: option.value,\n            text: option.text,\n            html: option.dataset && option.dataset.html ? option.dataset.html : '',\n            defaultSelected: option.defaultSelected,\n            selected: option.selected,\n            display: option.style.display !== 'none',\n            disabled: option.disabled,\n            mandatory: option.dataset ? option.dataset.mandatory === 'true' : false,\n            placeholder: option.dataset.placeholder === 'true',\n            class: option.className,\n            style: option.style.cssText,\n            data: option.dataset\n        };\n    }\n    getSelectedOptions() {\n        let options = [];\n        const opts = this.select.childNodes;\n        for (const o of opts) {\n            if (o.nodeName === 'OPTGROUP') {\n                const optgroupOptions = o.childNodes;\n                for (const oo of optgroupOptions) {\n                    if (oo.nodeName === 'OPTION') {\n                        const option = oo;\n                        if (option.selected) {\n                            options.push(this.getDataFromOption(option));\n                        }\n                    }\n                }\n            }\n            if (o.nodeName === 'OPTION') {\n                const option = o;\n                if (option.selected) {\n                    options.push(this.getDataFromOption(option));\n                }\n            }\n        }\n        return options;\n    }\n    getSelectedValues() {\n        return this.getSelectedOptions().map((option) => option.value);\n    }\n    setSelected(ids) {\n        this.changeListen(false);\n        const options = this.select.childNodes;\n        for (const o of options) {\n            if (o.nodeName === 'OPTGROUP') {\n                const optgroup = o;\n                const optgroupOptions = optgroup.childNodes;\n                for (const oo of optgroupOptions) {\n                    if (oo.nodeName === 'OPTION') {\n                        const option = oo;\n                        option.selected = ids.includes(option.id);\n                    }\n                }\n            }\n            if (o.nodeName === 'OPTION') {\n                const option = o;\n                option.selected = ids.includes(option.id);\n            }\n        }\n        this.changeListen(true);\n    }\n    setSelectedByValue(values) {\n        this.changeListen(false);\n        const options = this.select.childNodes;\n        for (const o of options) {\n            if (o.nodeName === 'OPTGROUP') {\n                const optgroup = o;\n                const optgroupOptions = optgroup.childNodes;\n                for (const oo of optgroupOptions) {\n                    if (oo.nodeName === 'OPTION') {\n                        const option = oo;\n                        option.selected = values.includes(option.value);\n                    }\n                }\n            }\n            if (o.nodeName === 'OPTION') {\n                const option = o;\n                option.selected = values.includes(option.value);\n            }\n        }\n        this.changeListen(true);\n    }\n    updateSelect(id, style, classes) {\n        this.changeListen(false);\n        if (id) {\n            this.select.dataset.id = id;\n        }\n        if (style) {\n            this.select.style.cssText = style;\n        }\n        if (classes) {\n            this.select.className = '';\n            classes.forEach((c) => {\n                if (c.trim() !== '') {\n                    this.select.classList.add(c.trim());\n                }\n            });\n        }\n        this.changeListen(true);\n    }\n    updateOptions(data) {\n        this.changeListen(false);\n        this.select.innerHTML = '';\n        for (const d of data) {\n            if (d instanceof Optgroup) {\n                this.select.appendChild(this.createOptgroup(d));\n            }\n            if (d instanceof Option) {\n                this.select.appendChild(this.createOption(d));\n            }\n        }\n        this.select.dispatchEvent(new Event('change', { bubbles: true }));\n        this.changeListen(true);\n    }\n    createOptgroup(optgroup) {\n        const optgroupEl = document.createElement('optgroup');\n        optgroupEl.id = optgroup.id;\n        optgroupEl.label = optgroup.label;\n        if (optgroup.selectAll) {\n            optgroupEl.dataset.selectAll = 'true';\n        }\n        if (optgroup.closable !== 'off') {\n            optgroupEl.dataset.closable = optgroup.closable;\n        }\n        if (optgroup.options) {\n            for (const o of optgroup.options) {\n                optgroupEl.appendChild(this.createOption(o));\n            }\n        }\n        return optgroupEl;\n    }\n    createOption(info) {\n        const optionEl = document.createElement('option');\n        optionEl.id = info.id;\n        optionEl.value = info.value;\n        optionEl.textContent = info.text;\n        if (info.html !== '') {\n            optionEl.setAttribute('data-html', info.html);\n        }\n        optionEl.defaultSelected = info.defaultSelected;\n        optionEl.selected = info.selected;\n        if (info.disabled) {\n            optionEl.disabled = true;\n        }\n        if (!info.display) {\n            optionEl.style.display = 'none';\n        }\n        if (info.placeholder) {\n            optionEl.setAttribute('data-placeholder', 'true');\n        }\n        if (info.mandatory) {\n            optionEl.setAttribute('data-mandatory', 'true');\n        }\n        if (info.class) {\n            info.class.split(' ').forEach((optionClass) => {\n                optionEl.classList.add(optionClass);\n            });\n        }\n        if (info.data && typeof info.data === 'object') {\n            Object.keys(info.data).forEach((key) => {\n                optionEl.setAttribute('data-' + kebabCase(key), info.data[key]);\n            });\n        }\n        return optionEl;\n    }\n    destroy() {\n        this.changeListen(false);\n        this.select.removeEventListener('change', this.valueChange);\n        if (this.observer) {\n            this.observer.disconnect();\n            this.observer = null;\n        }\n        delete this.select.dataset.id;\n        this.showUI();\n    }\n}\n\nclass Settings {\n    constructor(settings) {\n        this.id = '';\n        this.style = '';\n        this.class = [];\n        this.isMultiple = false;\n        this.isOpen = false;\n        this.isFullOpen = false;\n        this.intervalMove = null;\n        if (!settings) {\n            settings = {};\n        }\n        this.id = 'ss-' + generateID();\n        this.style = settings.style || '';\n        this.class = settings.class || [];\n        this.disabled = settings.disabled !== undefined ? settings.disabled : false;\n        this.alwaysOpen = settings.alwaysOpen !== undefined ? settings.alwaysOpen : false;\n        this.showSearch = settings.showSearch !== undefined ? settings.showSearch : true;\n        this.focusSearch = settings.focusSearch !== undefined ? settings.focusSearch : true;\n        this.ariaLabel = settings.ariaLabel || 'Combobox';\n        this.searchPlaceholder = settings.searchPlaceholder || 'Search';\n        this.searchText = settings.searchText || 'No Results';\n        this.searchingText = settings.searchingText || 'Searching...';\n        this.searchHighlight = settings.searchHighlight !== undefined ? settings.searchHighlight : false;\n        this.closeOnSelect = settings.closeOnSelect !== undefined ? settings.closeOnSelect : true;\n        this.contentLocation = settings.contentLocation || document.body;\n        this.contentPosition = settings.contentPosition || 'absolute';\n        this.openPosition = settings.openPosition || 'auto';\n        this.placeholderText = settings.placeholderText !== undefined ? settings.placeholderText : 'Select Value';\n        this.allowDeselect = settings.allowDeselect !== undefined ? settings.allowDeselect : false;\n        this.hideSelected = settings.hideSelected !== undefined ? settings.hideSelected : false;\n        this.keepOrder = settings.keepOrder !== undefined ? settings.keepOrder : false;\n        this.showOptionTooltips = settings.showOptionTooltips !== undefined ? settings.showOptionTooltips : false;\n        this.minSelected = settings.minSelected || 0;\n        this.maxSelected = settings.maxSelected || 1000;\n        this.timeoutDelay = settings.timeoutDelay || 200;\n        this.maxValuesShown = settings.maxValuesShown || 20;\n        this.maxValuesMessage = settings.maxValuesMessage || '{number} selected';\n        this.addableText = settings.addableText || 'Press \"Enter\" to add {value}';\n    }\n}\n\nclass SlimSelect {\n    constructor(config) {\n        var _a;\n        this.events = {\n            search: undefined,\n            searchFilter: (opt, search) => {\n                return opt.text.toLowerCase().indexOf(search.toLowerCase()) !== -1;\n            },\n            addable: undefined,\n            beforeChange: undefined,\n            afterChange: undefined,\n            beforeOpen: undefined,\n            afterOpen: undefined,\n            beforeClose: undefined,\n            afterClose: undefined\n        };\n        this.windowResize = debounce(() => {\n            if (!this.settings.isOpen && !this.settings.isFullOpen) {\n                return;\n            }\n            this.render.moveContent();\n        });\n        this.windowScroll = debounce(() => {\n            if (!this.settings.isOpen && !this.settings.isFullOpen) {\n                return;\n            }\n            this.render.moveContent();\n        });\n        this.documentClick = (e) => {\n            if (!this.settings.isOpen) {\n                return;\n            }\n            if (e.target && !hasClassInTree(e.target, this.settings.id)) {\n                this.close(e.type);\n            }\n        };\n        this.windowVisibilityChange = () => {\n            if (document.hidden) {\n                this.close();\n            }\n        };\n        this.selectEl = (typeof config.select === 'string' ? document.querySelector(config.select) : config.select);\n        if (!this.selectEl) {\n            if (config.events && config.events.error) {\n                config.events.error(new Error('Could not find select element'));\n            }\n            return;\n        }\n        if (this.selectEl.tagName !== 'SELECT') {\n            if (config.events && config.events.error) {\n                config.events.error(new Error('Element isnt of type select'));\n            }\n            return;\n        }\n        if (this.selectEl.dataset.ssid) {\n            this.destroy();\n        }\n        this.settings = new Settings(config.settings);\n        this.cssClasses = new CssClasses(config.cssClasses);\n        const debounceEvents = ['afterChange', 'beforeOpen', 'afterOpen', 'beforeClose', 'afterClose'];\n        for (const key in config.events) {\n            if (!config.events.hasOwnProperty(key)) {\n                continue;\n            }\n            if (debounceEvents.indexOf(key) !== -1) {\n                this.events[key] = debounce(config.events[key], 100);\n            }\n            else {\n                this.events[key] = config.events[key];\n            }\n        }\n        this.settings.disabled = ((_a = config.settings) === null || _a === void 0 ? void 0 : _a.disabled) ? config.settings.disabled : this.selectEl.disabled;\n        this.settings.isMultiple = this.selectEl.multiple;\n        this.settings.style = this.selectEl.style.cssText;\n        this.settings.class = this.selectEl.className.split(' ');\n        this.select = new Select(this.selectEl);\n        this.select.updateSelect(this.settings.id, this.settings.style, this.settings.class);\n        this.select.hideUI();\n        this.select.onValueChange = (options) => {\n            this.setSelected(options.map((option) => option.id));\n        };\n        this.select.onClassChange = (classes) => {\n            this.settings.class = classes;\n            this.render.updateClassStyles();\n        };\n        this.select.onDisabledChange = (disabled) => {\n            if (disabled) {\n                this.disable();\n            }\n            else {\n                this.enable();\n            }\n        };\n        this.select.onOptionsChange = (data) => {\n            this.setData(data);\n        };\n        this.store = new Store(this.settings.isMultiple ? 'multiple' : 'single', config.data ? config.data : this.select.getData());\n        if (config.data) {\n            this.select.updateOptions(this.store.getData());\n        }\n        const renderCallbacks = {\n            open: this.open.bind(this),\n            close: this.close.bind(this),\n            addable: this.events.addable ? this.events.addable : undefined,\n            setSelected: this.setSelected.bind(this),\n            addOption: this.addOption.bind(this),\n            search: this.search.bind(this),\n            beforeChange: this.events.beforeChange,\n            afterChange: this.events.afterChange\n        };\n        this.render = new Render(this.settings, this.cssClasses, this.store, renderCallbacks);\n        this.render.renderValues();\n        this.render.renderOptions(this.store.getData());\n        const selectAriaLabel = this.selectEl.getAttribute('aria-label');\n        const selectAriaLabelledBy = this.selectEl.getAttribute('aria-labelledby');\n        if (selectAriaLabel) {\n            this.render.main.main.setAttribute('aria-label', selectAriaLabel);\n        }\n        else if (selectAriaLabelledBy) {\n            this.render.main.main.setAttribute('aria-labelledby', selectAriaLabelledBy);\n        }\n        if (this.selectEl.parentNode) {\n            this.selectEl.parentNode.insertBefore(this.render.main.main, this.selectEl.nextSibling);\n        }\n        window.addEventListener('resize', this.windowResize, false);\n        if (this.settings.openPosition === 'auto') {\n            window.addEventListener('scroll', this.windowScroll, false);\n        }\n        document.addEventListener('visibilitychange', this.windowVisibilityChange);\n        if (this.settings.disabled) {\n            this.disable();\n        }\n        if (this.settings.alwaysOpen) {\n            this.open();\n        }\n        this.selectEl.slim = this;\n    }\n    enable() {\n        this.settings.disabled = false;\n        this.select.enable();\n        this.render.enable();\n    }\n    disable() {\n        this.settings.disabled = true;\n        this.select.disable();\n        this.render.disable();\n    }\n    getData() {\n        return this.store.getData();\n    }\n    setData(data) {\n        const selected = this.store.getSelected();\n        const err = this.store.validateDataArray(data);\n        if (err) {\n            if (this.events.error) {\n                this.events.error(err);\n            }\n            return;\n        }\n        this.store.setData(data);\n        const dataClean = this.store.getData();\n        this.select.updateOptions(dataClean);\n        this.render.renderValues();\n        this.render.renderOptions(dataClean);\n        if (this.events.afterChange && !isEqual(selected, this.store.getSelected())) {\n            this.events.afterChange(this.store.getSelectedOptions());\n        }\n    }\n    getSelected() {\n        let options = this.store.getSelectedOptions();\n        if (this.settings.keepOrder) {\n            options = this.store.selectedOrderOptions(options);\n        }\n        return options.map((option) => option.value);\n    }\n    setSelected(values, runAfterChange = true) {\n        const selected = this.store.getSelected();\n        const options = this.store.getDataOptions();\n        values = Array.isArray(values) ? values : [values];\n        const ids = [];\n        for (const value of values) {\n            if (options.find((option) => option.id == value)) {\n                ids.push(value);\n                continue;\n            }\n            for (const option of options.filter((option) => option.value == value)) {\n                ids.push(option.id);\n            }\n        }\n        this.store.setSelectedBy('id', ids);\n        const data = this.store.getData();\n        this.select.updateOptions(data);\n        this.render.renderValues();\n        if (this.render.content.search.input.value !== '') {\n            this.search(this.render.content.search.input.value);\n        }\n        else {\n            this.render.renderOptions(data);\n        }\n        if (runAfterChange && this.events.afterChange && !isEqual(selected, this.store.getSelected())) {\n            this.events.afterChange(this.store.getSelectedOptions());\n        }\n    }\n    addOption(option) {\n        const selected = this.store.getSelected();\n        if (!this.store.getDataOptions().some((o) => { var _a; return o.value === ((_a = option.value) !== null && _a !== void 0 ? _a : option.text); })) {\n            this.store.addOption(option);\n        }\n        const data = this.store.getData();\n        this.select.updateOptions(data);\n        this.render.renderValues();\n        this.render.renderOptions(data);\n        if (this.events.afterChange && !isEqual(selected, this.store.getSelected())) {\n            this.events.afterChange(this.store.getSelectedOptions());\n        }\n    }\n    open() {\n        if (this.settings.disabled || this.settings.isOpen) {\n            return;\n        }\n        if (this.events.beforeOpen) {\n            this.events.beforeOpen();\n        }\n        this.render.open();\n        if (this.settings.showSearch && this.settings.focusSearch) {\n            this.render.searchFocus();\n        }\n        this.settings.isOpen = true;\n        setTimeout(() => {\n            if (this.events.afterOpen) {\n                this.events.afterOpen();\n            }\n            if (this.settings.isOpen) {\n                this.settings.isFullOpen = true;\n            }\n            document.addEventListener('click', this.documentClick);\n        }, this.settings.timeoutDelay);\n        if (this.settings.contentPosition === 'absolute') {\n            if (this.settings.intervalMove) {\n                clearInterval(this.settings.intervalMove);\n            }\n            this.settings.intervalMove = setInterval(this.render.moveContent.bind(this.render), 500);\n        }\n    }\n    close(eventType = null) {\n        if (!this.settings.isOpen || this.settings.alwaysOpen) {\n            return;\n        }\n        if (this.events.beforeClose) {\n            this.events.beforeClose();\n        }\n        this.render.close();\n        if (this.render.content.search.input.value !== '') {\n            this.search('');\n        }\n        this.render.mainFocus(eventType);\n        this.settings.isOpen = false;\n        this.settings.isFullOpen = false;\n        setTimeout(() => {\n            if (this.events.afterClose) {\n                this.events.afterClose();\n            }\n            document.removeEventListener('click', this.documentClick);\n        }, this.settings.timeoutDelay);\n        if (this.settings.intervalMove) {\n            clearInterval(this.settings.intervalMove);\n        }\n    }\n    search(value) {\n        if (this.render.content.search.input.value !== value) {\n            this.render.content.search.input.value = value;\n        }\n        if (!this.events.search) {\n            this.render.renderOptions(value === '' ? this.store.getData() : this.store.search(value, this.events.searchFilter));\n            return;\n        }\n        this.render.renderSearching();\n        const searchResp = this.events.search(value, this.store.getSelectedOptions());\n        if (searchResp instanceof Promise) {\n            searchResp\n                .then((data) => {\n                this.render.renderOptions(this.store.partialToFullData(data));\n            })\n                .catch((err) => {\n                this.render.renderError(typeof err === 'string' ? err : err.message);\n            });\n            return;\n        }\n        else if (Array.isArray(searchResp)) {\n            this.render.renderOptions(this.store.partialToFullData(searchResp));\n        }\n        else {\n            this.render.renderError('Search event must return a promise or an array of data');\n        }\n    }\n    destroy() {\n        document.removeEventListener('click', this.documentClick);\n        window.removeEventListener('resize', this.windowResize, false);\n        if (this.settings.openPosition === 'auto') {\n            window.removeEventListener('scroll', this.windowScroll, false);\n        }\n        document.removeEventListener('visibilitychange', this.windowVisibilityChange);\n        this.store.setData([]);\n        this.render.destroy();\n        this.select.destroy();\n    }\n}\n\nexport { SlimSelect as default };\n","// import Swiper, { Navigation, Pagination, Scrollbar } from \"swiper\";\r\n// import { Fancybox } from \"@fancyapps/ui\";\r\n// Swiper.use([Navigation, Pagination, Scrollbar]);\r\n\r\n\r\nimport SlimSelect from 'slim-select'\r\n\r\n\r\nfunction isExist (element) {\r\n  return document.querySelector(element);\r\n}\r\n\r\n\r\nif (isExist('#select-cat')) {\r\n  new SlimSelect({\r\n    select: '#select-cat',\r\n    settings: {\r\n      showSearch: false,\r\n    }\r\n  })\r\n  \r\n}\r\n\r\n\r\nif (isExist('#select-other')) {\r\n  new SlimSelect({\r\n    select: '#select-other',\r\n    settings: {\r\n      showSearch: false,\r\n    }\r\n  })\r\n  \r\n}\r\n\r\n\r\ndocument.body.addEventListener('click', (e) => {\r\n  let target = e.target;\r\n  console.log(target);\r\n  if (target.dataset.accordion) initAccordion(target);\r\n})\r\n\r\nconst initAccordion = (target) => {\r\n  target.classList.toggle('faq__item--active')\r\n}","export default {\r\n  windowEl: window,\r\n  documentEl: document,\r\n  htmlEl: document.documentElement,\r\n  bodyEl: document.body,\r\n};\r\n","import './vendor/focus-visible.js';\r\n","/**\r\n * Applies the :focus-visible polyfill at the given scope.\r\n * A scope in this case is either the top-level Document or a Shadow Root.\r\n *\r\n * @param {(Document|ShadowRoot)} scope\r\n * @see https://github.com/WICG/focus-visible\r\n */\r\nfunction applyFocusVisiblePolyfill(scope) {\r\n  var hadKeyboardEvent = true;\r\n  var hadFocusVisibleRecently = false;\r\n  var hadFocusVisibleRecentlyTimeout = null;\r\n\r\n  var inputTypesAllowlist = {\r\n    text: true,\r\n    search: true,\r\n    url: true,\r\n    tel: true,\r\n    email: true,\r\n    password: true,\r\n    number: true,\r\n    date: true,\r\n    month: true,\r\n    week: true,\r\n    time: true,\r\n    datetime: true,\r\n    'datetime-local': true\r\n  };\r\n\r\n  /**\r\n   * Helper function for legacy browsers and iframes which sometimes focus\r\n   * elements like document, body, and non-interactive SVG.\r\n   * @param {Element} el\r\n   */\r\n  function isValidFocusTarget(el) {\r\n    if (\r\n      el &&\r\n      el !== document &&\r\n      el.nodeName !== 'HTML' &&\r\n      el.nodeName !== 'BODY' &&\r\n      'classList' in el &&\r\n      'contains' in el.classList\r\n    ) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Computes whether the given element should automatically trigger the\r\n   * `focus-visible` class being added, i.e. whether it should always match\r\n   * `:focus-visible` when focused.\r\n   * @param {Element} el\r\n   * @return {boolean}\r\n   */\r\n  function focusTriggersKeyboardModality(el) {\r\n    var type = el.type;\r\n    var tagName = el.tagName;\r\n\r\n    if (tagName === 'INPUT' && inputTypesAllowlist[type] && !el.readOnly) {\r\n      return true;\r\n    }\r\n\r\n    if (tagName === 'TEXTAREA' && !el.readOnly) {\r\n      return true;\r\n    }\r\n\r\n    if (el.isContentEditable) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Add the `focus-visible` class to the given element if it was not added by\r\n   * the author.\r\n   * @param {Element} el\r\n   */\r\n  function addFocusVisibleClass(el) {\r\n    if (el.classList.contains('focus-visible')) {\r\n      return;\r\n    }\r\n    el.classList.add('focus-visible');\r\n    el.setAttribute('data-focus-visible-added', '');\r\n  }\r\n\r\n  /**\r\n   * Remove the `focus-visible` class from the given element if it was not\r\n   * originally added by the author.\r\n   * @param {Element} el\r\n   */\r\n  function removeFocusVisibleClass(el) {\r\n    if (!el.hasAttribute('data-focus-visible-added')) {\r\n      return;\r\n    }\r\n    el.classList.remove('focus-visible');\r\n    el.removeAttribute('data-focus-visible-added');\r\n  }\r\n\r\n  /**\r\n   * If the most recent user interaction was via the keyboard;\r\n   * and the key press did not include a meta, alt/option, or control key;\r\n   * then the modality is keyboard. Otherwise, the modality is not keyboard.\r\n   * Apply `focus-visible` to any current active element and keep track\r\n   * of our keyboard modality state with `hadKeyboardEvent`.\r\n   * @param {KeyboardEvent} e\r\n   */\r\n  function onKeyDown(e) {\r\n    if (e.metaKey || e.altKey || e.ctrlKey) {\r\n      return;\r\n    }\r\n\r\n    if (isValidFocusTarget(scope.activeElement)) {\r\n      addFocusVisibleClass(scope.activeElement);\r\n    }\r\n\r\n    hadKeyboardEvent = true;\r\n  }\r\n\r\n  /**\r\n   * If at any point a user clicks with a pointing device, ensure that we change\r\n   * the modality away from keyboard.\r\n   * This avoids the situation where a user presses a key on an already focused\r\n   * element, and then clicks on a different element, focusing it with a\r\n   * pointing device, while we still think we're in keyboard modality.\r\n   * @param {Event} e\r\n   */\r\n  function onPointerDown(e) {\r\n    hadKeyboardEvent = false;\r\n  }\r\n\r\n  /**\r\n   * On `focus`, add the `focus-visible` class to the target if:\r\n   * - the target received focus as a result of keyboard navigation, or\r\n   * - the event target is an element that will likely require interaction\r\n   *   via the keyboard (e.g. a text box)\r\n   * @param {Event} e\r\n   */\r\n  function onFocus(e) {\r\n    // Prevent IE from focusing the document or HTML element.\r\n    if (!isValidFocusTarget(e.target)) {\r\n      return;\r\n    }\r\n\r\n    if (hadKeyboardEvent || focusTriggersKeyboardModality(e.target)) {\r\n      addFocusVisibleClass(e.target);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * On `blur`, remove the `focus-visible` class from the target.\r\n   * @param {Event} e\r\n   */\r\n  function onBlur(e) {\r\n    if (!isValidFocusTarget(e.target)) {\r\n      return;\r\n    }\r\n\r\n    if (\r\n      e.target.classList.contains('focus-visible') ||\r\n      e.target.hasAttribute('data-focus-visible-added')\r\n    ) {\r\n      // To detect a tab/window switch, we look for a blur event followed\r\n      // rapidly by a visibility change.\r\n      // If we don't see a visibility change within 100ms, it's probably a\r\n      // regular focus change.\r\n      hadFocusVisibleRecently = true;\r\n      window.clearTimeout(hadFocusVisibleRecentlyTimeout);\r\n      hadFocusVisibleRecentlyTimeout = window.setTimeout(function() {\r\n        hadFocusVisibleRecently = false;\r\n      }, 100);\r\n      removeFocusVisibleClass(e.target);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * If the user changes tabs, keep track of whether or not the previously\r\n   * focused element had .focus-visible.\r\n   * @param {Event} e\r\n   */\r\n  function onVisibilityChange(e) {\r\n    if (document.visibilityState === 'hidden') {\r\n      // If the tab becomes active again, the browser will handle calling focus\r\n      // on the element (Safari actually calls it twice).\r\n      // If this tab change caused a blur on an element with focus-visible,\r\n      // re-apply the class when the user switches back to the tab.\r\n      if (hadFocusVisibleRecently) {\r\n        hadKeyboardEvent = true;\r\n      }\r\n      addInitialPointerMoveListeners();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add a group of listeners to detect usage of any pointing devices.\r\n   * These listeners will be added when the polyfill first loads, and anytime\r\n   * the window is blurred, so that they are active when the window regains\r\n   * focus.\r\n   */\r\n  function addInitialPointerMoveListeners() {\r\n    document.addEventListener('mousemove', onInitialPointerMove);\r\n    document.addEventListener('mousedown', onInitialPointerMove);\r\n    document.addEventListener('mouseup', onInitialPointerMove);\r\n    document.addEventListener('pointermove', onInitialPointerMove);\r\n    document.addEventListener('pointerdown', onInitialPointerMove);\r\n    document.addEventListener('pointerup', onInitialPointerMove);\r\n    document.addEventListener('touchmove', onInitialPointerMove);\r\n    document.addEventListener('touchstart', onInitialPointerMove);\r\n    document.addEventListener('touchend', onInitialPointerMove);\r\n  }\r\n\r\n  function removeInitialPointerMoveListeners() {\r\n    document.removeEventListener('mousemove', onInitialPointerMove);\r\n    document.removeEventListener('mousedown', onInitialPointerMove);\r\n    document.removeEventListener('mouseup', onInitialPointerMove);\r\n    document.removeEventListener('pointermove', onInitialPointerMove);\r\n    document.removeEventListener('pointerdown', onInitialPointerMove);\r\n    document.removeEventListener('pointerup', onInitialPointerMove);\r\n    document.removeEventListener('touchmove', onInitialPointerMove);\r\n    document.removeEventListener('touchstart', onInitialPointerMove);\r\n    document.removeEventListener('touchend', onInitialPointerMove);\r\n  }\r\n\r\n  /**\r\n   * When the polfyill first loads, assume the user is in keyboard modality.\r\n   * If any event is received from a pointing device (e.g. mouse, pointer,\r\n   * touch), turn off keyboard modality.\r\n   * This accounts for situations where focus enters the page from the URL bar.\r\n   * @param {Event} e\r\n   */\r\n  function onInitialPointerMove(e) {\r\n    // Work around a Safari quirk that fires a mousemove on <html> whenever the\r\n    // window blurs, even if you're tabbing out of the page. ¯\\_(ツ)_/¯\r\n    if (e.target.nodeName && e.target.nodeName.toLowerCase() === 'html') {\r\n      return;\r\n    }\r\n\r\n    hadKeyboardEvent = false;\r\n    removeInitialPointerMoveListeners();\r\n  }\r\n\r\n  // For some kinds of state, we are interested in changes at the global scope\r\n  // only. For example, global pointer input, global key presses and global\r\n  // visibility change should affect the state at every scope:\r\n  document.addEventListener('keydown', onKeyDown, true);\r\n  document.addEventListener('mousedown', onPointerDown, true);\r\n  document.addEventListener('pointerdown', onPointerDown, true);\r\n  document.addEventListener('touchstart', onPointerDown, true);\r\n  document.addEventListener('visibilitychange', onVisibilityChange, true);\r\n\r\n  addInitialPointerMoveListeners();\r\n\r\n  // For focus and blur, we specifically care about state changes in the local\r\n  // scope. This is because focus / blur events that originate from within a\r\n  // shadow root are not re-dispatched from the host element if it was already\r\n  // the active element in its own scope:\r\n  scope.addEventListener('focus', onFocus, true);\r\n  scope.addEventListener('blur', onBlur, true);\r\n\r\n  // We detect that a node is a ShadowRoot by ensuring that it is a\r\n  // DocumentFragment and also has a host property. This check covers native\r\n  // implementation and polyfill implementation transparently. If we only cared\r\n  // about the native implementation, we could just check if the scope was\r\n  // an instance of a ShadowRoot.\r\n  if (scope.nodeType === Node.DOCUMENT_FRAGMENT_NODE && scope.host) {\r\n    // Since a ShadowRoot is a special kind of DocumentFragment, it does not\r\n    // have a root element to add a class to. So, we add this attribute to the\r\n    // host element instead:\r\n    scope.host.setAttribute('data-js-focus-visible', '');\r\n  } else if (scope.nodeType === Node.DOCUMENT_NODE) {\r\n    document.documentElement.classList.add('js-focus-visible');\r\n    document.documentElement.setAttribute('data-js-focus-visible', '');\r\n  }\r\n}\r\n\r\n// It is important to wrap all references to global window and document in\r\n// these checks to support server-side rendering use cases\r\n// @see https://github.com/WICG/focus-visible/issues/199\r\nif (typeof window !== 'undefined' && typeof document !== 'undefined') {\r\n  // Make the polyfill helper globally available. This can be used as a signal\r\n  // to interested libraries that wish to coordinate with the polyfill for e.g.,\r\n  // applying the polyfill to a shadow root:\r\n  window.applyFocusVisiblePolyfill = applyFocusVisiblePolyfill;\r\n\r\n  // Notify interested libraries of the polyfill's presence, in case the\r\n  // polyfill was loaded lazily:\r\n  var event;\r\n\r\n  try {\r\n    event = new CustomEvent('focus-visible-polyfill-ready');\r\n  } catch (error) {\r\n    // IE11 does not support using CustomEvent as a constructor directly:\r\n    event = document.createEvent('CustomEvent');\r\n    event.initCustomEvent('focus-visible-polyfill-ready', false, false, {});\r\n  }\r\n\r\n  window.dispatchEvent(event);\r\n}\r\n\r\nif (typeof document !== 'undefined') {\r\n  // Apply the polyfill to the global document, so that no JavaScript\r\n  // coordination is required to use the polyfill in the top-level document:\r\n  applyFocusVisiblePolyfill(document);\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import './_vendor';\r\nimport vars from './_vars';\r\nimport './_functions';\r\nimport './_components';\r\n"],"names":["SlimSelect","isExist","element","document","querySelector","select","settings","showSearch","body","addEventListener","e","target","console","log","dataset","accordion","initAccordion","classList","toggle","windowEl","window","documentEl","htmlEl","documentElement","bodyEl","applyFocusVisiblePolyfill","scope","hadKeyboardEvent","hadFocusVisibleRecently","hadFocusVisibleRecentlyTimeout","inputTypesAllowlist","text","search","url","tel","email","password","number","date","month","week","time","datetime","isValidFocusTarget","el","nodeName","focusTriggersKeyboardModality","type","tagName","readOnly","isContentEditable","addFocusVisibleClass","contains","add","setAttribute","removeFocusVisibleClass","hasAttribute","remove","removeAttribute","onKeyDown","metaKey","altKey","ctrlKey","activeElement","onPointerDown","onFocus","onBlur","clearTimeout","setTimeout","onVisibilityChange","visibilityState","addInitialPointerMoveListeners","onInitialPointerMove","removeInitialPointerMoveListeners","removeEventListener","toLowerCase","nodeType","Node","DOCUMENT_FRAGMENT_NODE","host","DOCUMENT_NODE","event","CustomEvent","error","createEvent","initCustomEvent","dispatchEvent","vars"],"sourceRoot":""}